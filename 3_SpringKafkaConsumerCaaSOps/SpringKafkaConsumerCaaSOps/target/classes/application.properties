# Spring BOOT Parameters
server.contextPath=/springKafkConsumer

server.port=9094

##################################################
spring.data.cassandra.contact-points=localhost
spring.data.cassandra.keyspace-name=mmtechwork
spring.data.cassandra.port=9042
###############################################



## Kafka Producer Properties 
spark.kafka.producer.topic=dev-kafka-topic
spark.kafka.producer.bootstrap-servers=localhost:9092,localhost:9092,localhost:9093,localhost:9094
#jsa.kafka.topic=jsa-kafka-topic
 #Set acknowledgements for producer requests.      
spark.kafka.producer.acks=all
#If the request fails, the producer can automatically retry,
spark.kafka.producer.retries=0
# Specify buffer size in config the default batch size in bytes when batching multiple records sent to a partition
spark.kafka.producer.batch.size=16384
#Reduce the no of requests less than 0   
spark.kafka.producer.linger.ms=1
#The buffer.memory controls the total amount of memory available to the producer for buffering.   
spark.kafka.producer.buffer.memory=33554432
spark.kafka.producer.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spark.kafka.producer.value.serializer= org.apache.kafka.common.serialization.StringSerializer
# the maximum size of a request in bytes 1048576 (1MB) 
spark.kafka.producer.max.request.size=1048576
## specify the compression codec for all data generated: none, gzip, snappy, lz4
spark.kafka.producer.compression.type=gzip


## Kafka security properties 
#Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.
security.protocol=SSL
kafka.ssl.truststore.location=/dbfs/mnt/kafka-private/ssl/kafka.client.truststore.jks
kafka.ssl.keystore.location=/dbfs/mnt/kafka-private/ssl/kafka.client.keystore.jks
kafka.ssl.keystore.password=<keystore-password>
kafka.ssl.truststore.password=truststore-password>


# If min.insync.replicas is set to 2 and acks is set to all, each message must be written successfully to at least
#two replicas.This guarantees that the message is not lost unless both hosts crash.
min.insync.replicas=1

#auto.create.topics.enable is set to true by
## partitioner.class
#Partitioner=org.apache.kafka.clients.producer.Partitioner interface.

#The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.
ssl.provider=null

#The file format of the trust store file Example JKS
ssl.truststore.type=


## Consumer Properties:
spark.kafka.consumer.group-id=jsa-group
spark.kafka.consumer.bootstrap.servers=localhost:9092,localhost:9093,localhost:9094
spark.kafka.consumer.group.id=test
spark.kafka.consumer.topic_name=mmtechworks_topic
spark.kafka.consumer.enable.auto.commit=true
spark.kafka.consumer.auto.commit.interval.ms=1000
spark.kafka.consumer.session.timeout.ms=30000
spark.kafka.consumer.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
spark.kafka.consumer.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer  
